// Generated by LiveScript 1.4.0
(function(){
  var ref$, launchEditor, deltosHome, getFilename, readConfig, editConfig, installTheme, init, newNote, newDaily, dumpTsv, dumpTsvTagged, dumpTodos, grepEntries, philtreEntries, writeDaily, writePost, editPost, commands, addCommand, func, e, slice$ = [].slice;
  ref$ = require('./util'), launchEditor = ref$.launchEditor, deltosHome = ref$.deltosHome, getFilename = ref$.getFilename, readConfig = ref$.readConfig, editConfig = ref$.editConfig, installTheme = ref$.installTheme;
  process.title = 'deltos';
  init = function(){
    var mkdirp;
    mkdirp = require('mkdirp');
    mkdirp.sync(deltosHome + 'by-id');
    mkdirp.sync(deltosHome + 'site/by-id');
    return mkdirp.sync(deltosHome + 'private/by-id');
  };
  ref$ = require('./entries'), newNote = ref$.newNote, newDaily = ref$.newDaily, dumpTsv = ref$.dumpTsv, dumpTsvTagged = ref$.dumpTsvTagged, dumpTodos = ref$.dumpTodos, grepEntries = ref$.grepEntries, philtreEntries = ref$.philtreEntries;
  writeDaily = function(){
    return launchEditor(newDaily());
  };
  writePost = function(it){
    return launchEditor(newNote(it));
  };
  editPost = function(it){
    return launchEditor(it);
  };
  commands = [];
  addCommand = function(name, desc, func){
    func.command = name;
    func.desc = desc;
    name = name.split(" ")[0];
    return commands[name] = func;
  };
  addCommand("init", "Set up DELTOS_HOME", init);
  addCommand("install-theme [git url]", "Install theme", function(it){
    return installTheme(it);
  });
  addCommand("title", "Show title of current deltos", function(){
    return console.log(readConfig().title);
  });
  addCommand("config", "Edit config file", editConfig);
  addCommand("new [title...]", "Create a note and print the filename", function(){
    var args;
    args = slice$.call(arguments);
    return console.log(newNote(args.join(' ')));
  });
  addCommand("daily", "Create a daily note and open in $EDITOR", function(){
    return writeDaily();
  });
  addCommand("post [title...]", "Start a new post in $EDITOR", function(){
    var args;
    args = slice$.call(arguments);
    return writePost(args.join(' '));
  });
  addCommand("edit [id]", "Edit an existing post", function(it){
    return editPost(getFilename(it));
  });
  addCommand('search', "Interactive search", function(){
    var launchSearch;
    launchSearch = require('./util').launchSearch;
    return launchSearch();
  });
  addCommand("grep [pattern]", "Grep body of notes", function(pat){
    return grepEntries(pat).map(function(it){
      return console.log(it);
    });
  });
  addCommand("philtre [query]", "Philtre notes", function(query){
    return philtreEntries(query).map(function(it){
      return console.log(it);
    });
  });
  addCommand("render [id]", "Render [id] as HTML", function(it){
    var render;
    render = require('./html').render;
    return console.log(render(it));
  });
  addCommand('build-site', "Build static HTML", function(){
    var ref$, buildSite, buildPrivateReference;
    ref$ = require('./html'), buildSite = ref$.buildSite, buildPrivateReference = ref$.buildPrivateReference;
    buildPrivateReference();
    return buildSite();
  });
  addCommand('clean', "Delete built HTML etc.", function(){
    var fs, dirs, i$, len$, dir, lresult$, j$, ref$, len1$, fname, results$ = [];
    fs = require('fs');
    dirs = [deltosHome + '/site/by-id/', deltosHome + '/private/by-id/'];
    for (i$ = 0, len$ = dirs.length; i$ < len$; ++i$) {
      dir = dirs[i$];
      lresult$ = [];
      for (j$ = 0, len1$ = (ref$ = fs.readdirSync(dir)).length; j$ < len1$; ++j$) {
        fname = ref$[j$];
        lresult$.push(fs.unlinkSync(dir + fname));
      }
      results$.push(lresult$);
    }
    return results$;
  });
  addCommand('add-image', "Add an image to the store", function(){
    var args, addImage;
    args = slice$.call(arguments);
    addImage = require('./image').addImage;
    return addImage.apply(null, args);
  });
  addCommand('regenerate-images', "Destroy and regenerate resized images.", function(){
    var regenerateImage;
    regenerateImage = require('./image').regenerateImage;
    return regenerateImages();
  });
  addCommand('json', "Dump all entries to JSON", function(){
    var dumpJson;
    dumpJson = require('./html').dumpJson;
    return console.log(dumpJson());
  });
  addCommand('todos', "Dump todo list", function(){
    return console.log(dumpTodos());
  });
  addCommand('tagged', "Dump TSV for posts with tag", function(it){
    return console.log(dumpTsvTagged(it));
  });
  addCommand('tsv', "Dump basic TSV", function(){
    return console.log(dumpTsv());
  });
  addCommand('version', "Show version number", function(){
    var pkg;
    pkg = require('../package.json');
    return console.log(pkg.version);
  });
  addCommand('help', "Show this help", function(){
    var name, ref$, func, pad;
    console.log("usage: deltos <command> [options...]\n");
    for (name in ref$ = commands) {
      func = ref$[name];
      pad = repeatString$(' ', 25 - func.command.length);
      console.log("    " + func.command + pad + func.desc);
    }
    return process.exit(1);
  });
  try {
    func = commands[process.argv[2]];
  } catch (e$) {
    e = e$;
    func = commands.help();
  }
  if (!func) {
    func = commands.help;
  }
  func.apply(null, process.argv.slice(3));
  function repeatString$(str, n){
    for (var r = ''; n > 0; (n >>= 1) && (str += str)) if (n & 1) r += str;
    return r;
  }
}).call(this);
