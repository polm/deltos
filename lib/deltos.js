// Generated by LiveScript 1.4.0
(function(){
  var ref$, readStdinAsLinesThen, launchEditor, deltosHome, getFilename, init, newNote, newDaily, dumpTsv, dumpTodos, writeDaily, writePost, editPost, render, buildSite, buildPrivateReference, allToJson, commands, addCommand, func, e;
  ref$ = require('./util'), readStdinAsLinesThen = ref$.readStdinAsLinesThen, launchEditor = ref$.launchEditor, deltosHome = ref$.deltosHome, getFilename = ref$.getFilename;
  init = function(){
    var mkdirp;
    mkdirp = require('mkdirp');
    mkdirp.sync(deltosHome + 'by-id');
    mkdirp.sync(deltosHome + 'site');
    return mkdirp.sync(deltosHome + 'private');
  };
  ref$ = require('./entries'), newNote = ref$.newNote, newDaily = ref$.newDaily, dumpTsv = ref$.dumpTsv, dumpTodos = ref$.dumpTodos;
  writeDaily = function(){
    return launchEditor(newDaily());
  };
  writePost = function(it){
    return launchEditor(newNote(it));
  };
  editPost = function(it){
    return launchEditor(it);
  };
  ref$ = require('./html'), render = ref$.render, buildSite = ref$.buildSite, buildPrivateReference = ref$.buildPrivateReference, allToJson = ref$.allToJson;
  commands = [];
  addCommand = function(name, desc, func){
    func.command = name;
    func.desc = desc;
    name = name.split(" ")[0];
    return commands[name] = func;
  };
  addCommand("init", "Set up DELTOS_HOME", init);
  addCommand("new [title...]", "Create a note and print the filename", function(){
    return console.log(newNote(process.argv.slice(3).join(' ')));
  });
  addCommand("daily", "Create a daily note and open in $EDITOR", function(){
    return writeDaily();
  });
  addCommand("post [title...]", "Start a new post in $EDITOR", function(){
    return writePost(process.argv.slice(3).join(' '));
  });
  addCommand("edit [id]", "Edit an existing post", function(){
    return editPost(getFilename(process.argv[3]));
  });
  addCommand("render [id]", "Render [id] as HTML", function(){
    return console.log(render(process.argv[3]));
  });
  addCommand('build-site', "Build static HTML", function(){
    buildPrivateReference();
    return buildSite();
  });
  addCommand('json', "Dump all entries to JSON", allToJson);
  addCommand('todos', "Dump todo list", function(){
    return console.log(dumpTodos());
  });
  addCommand('tsv', "Dump basic TSV", function(){
    return console.log(dumpTsv());
  });
  addCommand('version', "Show version number", function(){
    var pkg;
    pkg = require('../package.json');
    return console.log(pkg.version);
  });
  addCommand('help', "Show this help", function(){
    var name, ref$, func;
    console.log("usage: deltos <command> [options...]\n");
    for (name in ref$ = commands) {
      func = ref$[name];
      console.log("\t" + func.command + "\t\t" + func.desc);
    }
    return process.exit(1);
  });
  try {
    func = commands[process.argv[2]];
  } catch (e$) {
    e = e$;
    func = commands.help();
  }
  if (!func) {
    func = commands.help;
  }
  func();
}).call(this);
