// Generated by LiveScript 1.4.0
(function(){
  var deltosHome, BASEDIR, getFilename, Yaml, yaml, memoize, isIn, tagged, noEmpty, normalizeDate, localIsoTime, readStdinAsLinesThen, launchEditor, launchSearch, out$ = typeof exports != 'undefined' && exports || this;
  out$.deltosHome = deltosHome = (process.env.DELTOS_HOME || process.env.HOME + '/.deltos') + '/';
  out$.BASEDIR = BASEDIR = deltosHome + '/by-id/';
  out$.getFilename = getFilename = function(it){
    return BASEDIR + it;
  };
  Yaml = require('js-yaml');
  out$.yaml = yaml = function(it){
    return Yaml.safeLoad(it, {
      schema: Yaml.FAILSAFE_SCHEMA
    });
  };
  out$.memoize = memoize = function(func){
    var output;
    output = null;
    return function(){
      if (output) {
        return output;
      }
      output = func();
      return output;
    };
  };
  out$.isIn = isIn = curry$(function(list, item){
    return -1 < list.indexOf(item);
  });
  out$.tagged = tagged = curry$(function(tag, entry){
    return !tag || isIn(entry.tags, tag);
  });
  out$.noEmpty = noEmpty = function(it){
    return it.filter(function(it){
      return !(it === null || it === '');
    });
  };
  out$.normalizeDate = normalizeDate = function(it){
    return it.date = new Date(it.date).toISOString();
  };
  out$.localIsoTime = localIsoTime = function(vsnow){
    var offset, offsetMs, localTime, offsetHours, offsetDoubleOhHours, offsetPrefix, offsetString;
    vsnow == null && (vsnow = 0);
    offset = new Date().getTimezoneOffset();
    offsetMs = offset * 60000;
    offsetMs += vsnow;
    localTime = new Date(Date.now() - offsetMs).toISOString().slice(0, -1);
    offsetHours = offset / 60;
    offsetDoubleOhHours = ~~offsetHours * 100;
    if (offsetHours % 1 !== 0) {
      offsetDoubleOhHours += 50;
    }
    offsetPrefix = '-';
    if (offsetDoubleOhHours < 0) {
      offsetPrefix = '+';
      offsetDoubleOhHours *= -1;
    }
    offsetString = '000000' + offsetDoubleOhHours;
    offsetString = offsetString.slice(offsetString.length - 4);
    return localTime + offsetPrefix + offsetString;
  };
  out$.readStdinAsLinesThen = readStdinAsLinesThen = function(func){
    var buf;
    buf = '';
    process.stdin.setEncoding('utf-8');
    process.stdin.on('data', function(it){
      return buf += it;
    });
    return process.stdin.on('end', function(){
      return func(noEmpty(
      buf.split("\n")));
    });
  };
  out$.launchEditor = launchEditor = function(file, after){
    var spawn, cp;
    spawn = require('child_process').spawn;
    cp = spawn(process.env.EDITOR, [file], {
      stdio: 'inherit'
    });
    return typeof after == 'function' ? after() : void 8;
  };
  out$.launchSearch = launchSearch = function(after){
    var search, dumpTsv, stuff;
    search = require('searchy').search;
    dumpTsv = require('./entries').dumpTsv;
    stuff = dumpTsv().split("\n");
    stuff = stuff.map(function(it){
      return it.split("\t").join(" :: ");
    });
    return search(stuff, function(it){
      return launchEditor(getFilename(it.split(" :: ")[2].trim()));
    });
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
