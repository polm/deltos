// Generated by LiveScript 1.5.0
(function(){
  var deltosHome, BASEDIR, getFilename, CONFIG, fs, Yaml, yaml, yamlDump, Markdown, markdown, memoize, isIn, tagged, noEmpty, getSlug, localIsoTime, getYesterday, readStdinAsLinesThen, launchEditor, launchSearch, readConfig, editConfig, installTheme, getMtime, out$ = typeof exports != 'undefined' && exports || this;
  out$.deltosHome = deltosHome = (process.env.DELTOS_HOME || process.env.HOME + '/.deltos') + '/';
  out$.BASEDIR = BASEDIR = deltosHome + '/by-id/';
  out$.getFilename = getFilename = function(it){
    return BASEDIR + it;
  };
  CONFIG = deltosHome + 'config.yaml';
  fs = require('fs');
  Yaml = {};
  out$.yaml = yaml = function(it){
    if (!Yaml.safeLoad) {
      Yaml = require('js-yaml');
    }
    return Yaml.safeLoad(it, {
      schema: Yaml.FAILSAFE_SCHEMA
    });
  };
  out$.yamlDump = yamlDump = function(it){
    if (!Yaml.safeLoad) {
      Yaml = require('js-yaml');
    }
    return Yaml.safeDump(it, {
      schema: Yaml.FAILSAFE_SCHEMA,
      flowLevel: 1
    });
  };
  Markdown = {};
  out$.markdown = markdown = function(it){
    if (!Markdown.render) {
      Markdown = require('markdown-it')({
        html: true
      }).use(require('markdown-it-footnote')).use(require('markdown-it-highlightjs')).use(require('markdown-it-anchor'), {
        permalink: true,
        permalinkSymbol: 'â˜™',
        level: 1,
        permalinkBefore: true
      });
    }
    return Markdown.render(it);
  };
  out$.memoize = memoize = function(func){
    var output;
    output = {};
    return function(it){
      if (output[it] !== undefined) {
        return output[it];
      }
      output[it] = func(it);
      return output[it];
    };
  };
  out$.isIn = isIn = curry$(function(list, item){
    return -1 < list.indexOf(item);
  });
  out$.tagged = tagged = curry$(function(tag, entry){
    return !tag || isIn(entry.tags, tag);
  });
  out$.noEmpty = noEmpty = function(it){
    return it.filter(function(it){
      return !(it === null || it === '');
    });
  };
  out$.getSlug = getSlug = function(entry){
    return entry.title.replace(/ /g, '-').replace(/[!@#$%^&\*\.\(\)\[\]\/\\'"{}?<>]/g, '');
  };
  out$.localIsoTime = localIsoTime = function(vsnow){
    var offset, offsetMs, localTime, offsetHours, offsetDoubleOhHours, offsetPrefix, offsetString;
    vsnow == null && (vsnow = 0);
    offset = new Date().getTimezoneOffset();
    offsetMs = offset * 60000;
    offsetMs -= vsnow;
    localTime = new Date(Date.now() - offsetMs).toISOString().slice(0, -1);
    offsetHours = offset / 60;
    offsetDoubleOhHours = ~~offsetHours * 100;
    if (offsetHours % 1 !== 0) {
      offsetDoubleOhHours += 50;
    }
    offsetPrefix = '-';
    if (offsetDoubleOhHours < 0) {
      offsetPrefix = '+';
      offsetDoubleOhHours *= -1;
    }
    offsetString = '000000' + offsetDoubleOhHours;
    offsetString = offsetString.slice(offsetString.length - 4);
    return localTime + offsetPrefix + offsetString;
  };
  out$.getYesterday = getYesterday = function(){
    var today, hour, maybeYesterday;
    today = localIsoTime().substr(0, 10);
    hour = 1000 * 60 * 60;
    maybeYesterday = localIsoTime(-22 * hour);
    if (maybeYesterday !== today) {
      return maybeYesterday.substr(0, 10);
    }
    maybeYesterday = localIsoTime(-24 * hour);
    if (maybeYesterday !== today) {
      return maybeYesterday.substr(0, 10);
    }
    return localIsoTime(-26 * hour).substr(0, 10);
  };
  out$.readStdinAsLinesThen = readStdinAsLinesThen = function(func){
    var buf;
    buf = '';
    process.stdin.setEncoding('utf-8');
    process.stdin.on('data', function(it){
      return buf += it;
    });
    return process.stdin.on('end', function(){
      return func(noEmpty(
      buf.split("\n")));
    });
  };
  out$.launchEditor = launchEditor = function(file, after){
    var spawn, cp;
    spawn = require('child_process').spawn;
    cp = spawn(process.env.EDITOR, [file], {
      stdio: 'inherit'
    });
    return typeof after == 'function' ? after() : void 8;
  };
  out$.launchSearch = launchSearch = function(after){
    var searchUsingDefault, philtre, ref$, renderTsvEntry, newNote, allEntriesCacheFirst, entryToString, addTostring, entries, editExisting, editNew, searchy;
    searchUsingDefault = require('searchy').searchUsingDefault;
    philtre = require('philtre').philtre;
    ref$ = require('./entries'), renderTsvEntry = ref$.renderTsvEntry, newNote = ref$.newNote, allEntriesCacheFirst = ref$.allEntriesCacheFirst;
    entryToString = function(){
      return renderTsvEntry(this).split("\t").join(" :: ");
    };
    addTostring = function(it){
      it.toString = entryToString;
      return it;
    };
    entries = [];
    editExisting = function(it){
      return launchEditor(getFilename(it.id) + '/deltos');
    };
    editNew = function(it){
      return launchEditor(newNote(it) + '/deltos');
    };
    searchy = searchUsingDefault(entries, editExisting, editNew, function(needle, haystack){
      var e;
      try {
        return philtre(needle, [haystack]).length;
      } catch (e$) {
        e = e$;
        return false;
      }
    });
    return allEntriesCacheFirst(searchy.items, addTostring, searchy.refresh);
  };
  out$.readConfig = readConfig = memoize(function(){
    var e;
    try {
      return yaml(fs.readFileSync(CONFIG, 'utf-8'));
    } catch (e$) {
      e = e$;
      console.error("Error reading config:\n" + e.message);
      return process.exit(1);
    }
  });
  out$.editConfig = editConfig = function(){
    return launchEditor(CONFIG);
  };
  out$.installTheme = installTheme = function(themeGitUrl){
    var exec, e, i$, ref$, len$, file, results$ = [];
    exec = require('child_process').execSync;
    exec("git clone '" + themeGitUrl + "' '" + deltosHome + "/theme'");
    try {
      fs.mkdirSync(deltosHome + "/site");
      fs.mkdirSync(deltosHome + "/site/by-id");
      fs.mkdirSync(deltosHome + "/private");
      fs.mkdirSync(deltosHome + "/private/by-id");
    } catch (e$) {
      e = e$;
      'ok';
    }
    for (i$ = 0, len$ = (ref$ = fs.readdirSync(deltosHome + "/theme")).length; i$ < len$; ++i$) {
      file = ref$[i$];
      if (file === "single.html") {
        continue;
      }
      if (file === "README.md") {
        continue;
      }
      fs.symlinkSync(deltosHome + "/theme/" + file, deltosHome + "/site/" + file);
      results$.push(fs.symlinkSync(deltosHome + "/theme/" + file, deltosHome + "/private/" + file));
    }
    return results$;
  };
  out$.getMtime = getMtime = function(fname){
    var e;
    try {
      return +fs.statSync(fname).mtime;
    } catch (e$) {
      e = e$;
      return 0;
    }
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
