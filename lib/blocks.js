// Generated by LiveScript 1.4.0
(function(){
  var child_process, Markdown, markdown, getAllEntries, ref$, map, sortBy, sortWith, reverse, isIn, tagged, getFilename, fs, img, video, search, archive, children, getChildEntries, recent, buildListPage, toMarkdownLink, sortOrderThenDate, buildHierarchicalList, embed, blockmap, deltosLinkToHtml, getSlug, processBlock, renderBlock, out$ = typeof exports != 'undefined' && exports || this;
  child_process = require('child_process');
  Markdown = require('markdown-it')({
    html: true
  });
  markdown = function(it){
    return Markdown.render(it);
  };
  getAllEntries = require('./entries').getAllEntries;
  ref$ = require('prelude-ls'), map = ref$.map, sortBy = ref$.sortBy, sortWith = ref$.sortWith, reverse = ref$.reverse;
  ref$ = require('./util'), isIn = ref$.isIn, tagged = ref$.tagged, getFilename = ref$.getFilename;
  fs = require('fs');
  img = function(block, entry){
    var words, imgSrc, tag, caption;
    words = block.split(' ');
    words.shift();
    imgSrc = words.shift();
    tag = "<img src=\"" + imgSrc + "\"/>";
    caption = words.length ? '<p class="caption">' + markdown(words.join(' ')).substr(3) : '';
    if (!entry.firstImage) {
      entry.firstImage = imgSrc;
    }
    return "<div class=\"img\">" + tag + caption + "</div>";
  };
  video = function(block, entry){
    var words, vidTag, caption;
    words = block.split(' ');
    words.shift();
    vidTag = "<video preload=\"auto\" autoplay=\"autoplay\" loop=\"loop\" style=\"width: 100%; height: auto;\" controls> <source src=\"" + words.shift() + "\" type='video/webm; codecs=\"vp8, vorbis\"'></source> </video>";
    caption = words.length ? '<p class="caption">' + words.join(' ') + '</p>' : '';
    return "<div class=\"img\">" + vidTag + caption + "</div>";
  };
  search = function(block, entry){
    return '<div class="search"><input class="deltos-search" type="text"></input><div class="deltos-results-summary"></div><div class="deltos-results"></div><script src="/search.js"></script></div>';
  };
  archive = function(block, entry){
    entry.updated = true;
    return markdown(buildListPage().join("\n"));
  };
  children = function(block, entry){
    return markdown(buildListPage(getChildEntries(entry)).join("\n"));
  };
  getChildEntries = function(parent){
    return getAllEntries().filter(function(it){
      return -1 !== parent.children.indexOf(it.id);
    });
  };
  recent = function(block, entry){
    entry.updated = true;
    return markdown(buildListPage().slice(0, 5).join("\n"));
  };
  buildListPage = function(entries){
    if (!entries) {
      entries = getAllEntries();
    }
    entries = entries.filter(tagged('published')).filter(function(it){
      return !tagged('hidden', it);
    });
    return map(toMarkdownLink)(
    reverse(
    sortBy(function(it){
      return it.date;
    }, entries)));
  };
  toMarkdownLink = function(it){
    var tags;
    tags = it.tags.filter(function(it){
      return it !== 'published';
    }).join(", ");
    return "- [" + it.title + "](/by-id/" + it.id + ".html#" + getSlug(it) + ") <span class=\"tags\">" + tags + "</span>";
  };
  sortOrderThenDate = function(a, b){
    if ((a != null && a.order) && (b != null && b.order)) {
      if (a.order < b.order) {
        return 1;
      } else {
        return -1;
      }
    }
    if (a.date > b.date) {
      return -1;
    } else {
      return 1;
    }
  };
  buildHierarchicalList = function(entries, depth, parent){
    var children, out, spacer, i$, len$, child;
    parent == null && (parent = null);
    if (depth === 0) {
      return '';
    }
    if (parent) {
      children = entries.filter(function(it){
        return it.parents && isIn(it.parents, parent);
      });
    } else {
      children = entries.filter(function(it){
        return !it.parents;
      });
    }
    children = sortWith(sortOrderThenDate, children);
    out = '';
    spacer = parent ? '  ' : '';
    for (i$ = 0, len$ = children.length; i$ < len$; ++i$) {
      child = children[i$];
      out += spacer + toMarkdownLink(child) + "\n";
      if (depth > 0) {
        out += buildHierarchicalList(entries, depth - 1, child.id).split("\n").map(fn$).join('\n');
      }
    }
    return out;
    function fn$(it){
      return spacer + it;
    }
  };
  embed = function(block, entry){
    var lines, url, result, fname, rawFile;
    lines = block.split("\n");
    if (lines.length > 1) {
      return lines.slice(1).join('\n');
    }
    url = lines[0].split(' ').slice(1).join(' ');
    result = child_process.execSync("kinkan '" + url + "'");
    fname = getFilename(entry.id);
    rawFile = fs.readFileSync(fname, 'utf-8');
    rawFile = rawFile.split(lines[0]).join(lines[0] + "\n" + result);
    fs.writeFileSync(fname, rawFile, 'utf-8');
    return result;
  };
  blockmap = {
    img: img,
    video: video,
    search: search,
    archive: archive,
    children: children,
    recent: recent,
    embed: embed
  };
  deltosLinkToHtml = function(it){
    var linkRegex, entries;
    linkRegex = /\.\(([^\/]*)\/\/([^\)]*)\)/g;
    entries = getAllEntries();
    return it.replace(linkRegex, function(matched, label, dest){
      var entry;
      entry = entries.filter(function(it){
        return it.id === dest;
      })[0];
      return "<a href=\"/by-id/" + dest + ".html#" + getSlug(entry) + "\">" + label + "</a>";
    });
  };
  out$.getSlug = getSlug = function(entry){
    return entry.title.replace(/ /g, '-').replace(/[!@#$%^&\*\.\(\)\[\]\/\\'"{}?<>]/g, '');
  };
  processBlock = function(keyword, block, entry){
    var e;
    try {
      return blockmap[keyword](block, entry);
    } catch (e$) {
      e = e$;
      console.log("keyword: " + keyword);
      throw e;
    }
  };
  out$.renderBlock = renderBlock = function(block, entry){
    var keyword;
    while (block[0] === "\n") {
      block = block.substr(1);
    }
    if (block[0] === '!') {
      block = block.slice(1);
      keyword = block.split("\n")[0].split(' ')[0];
      return processBlock(keyword, block, entry);
    } else {
      return markdown(deltosLinkToHtml(block));
    }
  };
}).call(this);
