// Generated by LiveScript 1.4.0
(function(){
  var exec, fs, getNewId, ref$, deltosHome, readConfig, width, processImage, addImage, regenerateImages, out$ = typeof exports != 'undefined' && exports || this;
  exec = require('child_process').execSync;
  fs = require('fs');
  getNewId = require('./entries').getNewId;
  ref$ = require('./util'), deltosHome = ref$.deltosHome, readConfig = ref$.readConfig;
  width = readConfig().width || 500;
  processImage = function(imgdir, base, ftype){
    var exec, fname;
    exec = require('child_process').execSync;
    fname = imgdir + base + '.o.' + ftype;
    exec("convert \"" + fname + "\" -resize " + width + "x1000 " + imgdir + "/" + base + ".l." + ftype);
    exec("convert \"" + fname + "\" -resize '" + width + "x200^' -gravity center -extent " + width + "x200 " + imgdir + "/" + base + ".c." + ftype);
    exec("convert \"" + fname + "\" -gravity center -resize '90x90^' -crop 90x90+0+0 " + imgdir + "/" + base + ".s." + ftype);
    return "/img/" + base + ".l." + ftype;
  };
  out$.addImage = addImage = function(fname, desc){
    var imgdir, ftype, ref$, getNewId, base;
    desc == null && (desc = '');
    imgdir = deltosHome + '/img/';
    ftype = (ref$ = fname.split('.'))[ref$.length - 1];
    getNewId = require('./entries').getNewId;
    base = getNewId(function(it){
      return imgdir + it;
    });
    fs.writeFileSync(imgdir + base, desc);
    fs.writeFileSync(imgdir + base + '.o.' + ftype, fs.readFileSync(fname));
    processImage(imgdir, base, ftype);
    console.log("Created resized image and thumbnail. Use the URL below in a note:");
    return console.log("/img/" + base + ".l." + ftype);
  };
  out$.regenerateImages = regenerateImages = function(){
    var imgdir, i$, ref$, len$, fname, parts, results$ = [];
    imgdir = deltosHome + '/img/';
    for (i$ = 0, len$ = (ref$ = fs.readdirSync(imgdir)).length; i$ < len$; ++i$) {
      fname = ref$[i$];
      parts = fname.split('.');
      if (parts.length === 1) {
        continue;
      }
      if (parts[parts.length - 2] !== 'o') {
        continue;
      }
      results$.push(processImage(imgdir, parts[0], parts[parts.length - 1]));
    }
    return results$;
  };
}).call(this);
