// Generated by LiveScript 1.4.0
(function(){
  var WINDOW, philtre, map, loadEntriesThen, makeHitDiv, makeEmbed, search, pointerHandler, input;
  WINDOW = 5;
  philtre = require('philtre').philtre;
  map = function(list, func){
    return Array.prototype.map.call(list, func);
  };
  loadEntriesThen = function(callback){
    var req;
    req = new XMLHttpRequest();
    req.onload = callback;
    req.open('GET', '/deltos.json', true);
    return req.send();
  };
  loadEntriesThen(function(it){
    var entries, input;
    entries = it.target.response.split("\n").filter(function(it){
      return it.length > 0;
    }).map(function(it){
      return JSON.parse(it);
    });
    window.entries = entries;
    input = document.querySelector('.deltos-search');
    input.oninput = search;
    return search();
  });
  makeHitDiv = function(entry){
    var div;
    div = document.createElement('div');
    div.innerHTML = makeEmbed(entry);
    return div;
  };
  makeEmbed = function(entry){
    var out, url;
    out = "<a class=\"result\" href=\"" + entry.link + "\">";
    out += '<div class="summary-small">';
    out += '<div class="imgwrapper" ';
    if (entry.image) {
      url = entry.image;
      if (/imgur.com.*l..../.test(entry.image)) {
        url = url.substr(0, url.length - 5) + 's.jpg';
      }
      out += "style=\"background-image: url(" + url + ")\"";
    }
    out += "></div>";
    out += "<h2>" + entry.title + "</h2>";
    out += "<p>" + entry.description + "</p>";
    return out += "</div></a>";
  };
  search = function(){
    var rd, input, summary, query, results, out, i$, len$, entry, results$ = [];
    rd = document.querySelector('.deltos-results');
    input = document.querySelector('.deltos-search');
    summary = document.querySelector('.deltos-results-summary');
    rd.innerHTML = '';
    query = input.value.toLowerCase();
    if (input.previous !== query) {
      input.offset = 0;
      input.pointer = -1;
      input.previous = query;
      console.log("query: " + query);
    }
    results = philtre(query, entries);
    input.hits = results.length;
    out = results.slice(input.offset, input.offset + WINDOW);
    summary.innerHTML = results.length + " hits";
    for (i$ = 0, len$ = results.length; i$ < len$; ++i$) {
      entry = results[i$];
      results$.push(rd.appendChild(makeHitDiv(entry)));
    }
    return results$;
  };
  pointerHandler = function(it){
    var results, event, reRender, selected, grand;
    results = document.querySelectorAll(".deltos-results .result");
    map(results, function(it){
      return it.classList.remove('selected');
    });
    event = it;
    reRender = function(){
      event.preventDefault();
      search();
      return results = document.querySelectorAll(".deltos-results .result");
    };
    switch (it.keyCode) {
    case 33:
    case 34:
      if (it.keyCode === 33) {
        this.pointer = Math.max(-1, this.pointer - WINDOW);
      }
      if (it.keyCode === 34) {
        this.pointer = Math.min(results.length - 1, this.pointer + WINDOW);
      }
      event.preventDefault();
      break;
    case 38:
      this.pointer = Math.max(-1, this.pointer - 1);
      break;
    case 40:
      this.pointer = Math.min(results.length - 1, this.pointer + 1);
      break;
    case 13:
      if (this.pointer > -1 && this.pointer < results.length) {
        document.location = results[this.pointer].href;
      }
      break;
    default:
      'ok';
    }
    selected = results[this.pointer];
    if (selected) {
      console.log(selected);
      console.log(selected.parentElement);
      selected.classList.add('selected');
      grand = selected.parentElement.parentElement;
      return grand.scrollTop = selected.offsetTop - grand.offsetTop;
    }
  };
  input = document.querySelector('.deltos-search');
  input.pointer = -1;
  input.offset = 0;
  input.hits = 0;
  input.previous = '';
  input.onkeydown = pointerHandler;
  input.focus();
}).call(this);
