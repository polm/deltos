// Generated by LiveScript 1.4.0
(function(){
  var prelude, pairsToObj, string2html, getFirstChild, Rule, ListRule, Section, out$ = typeof exports != 'undefined' && exports || this;
  prelude = require('prelude-ls');
  pairsToObj = prelude.pairsToObj;
  string2html = function(el, html){
    var div;
    div = el.ownerDocument.createElement('div');
    div.innerHTML = html;
    return div.childNodes;
  };
  getFirstChild = function(it){
    var fc;
    fc = it.firstChild;
    while (fc.nodeType !== 1) {
      fc = fc.nextSibling;
    }
    return fc;
  };
  Rule = (function(){
    Rule.displayName = 'Rule';
    var prototype = Rule.prototype, constructor = Rule;
    function Rule(selector, accessor, opts){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.selector = selector;
      this$.accessor = accessor;
      opts == null && (opts = null);
      this$.pull = bind$(this$, 'pull', prototype);
      this$.push = bind$(this$, 'push', prototype);
      this$._push = opts != null ? opts.push : void 8;
      this$._pull = opts != null ? opts.extract : void 8;
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.push = function(root, data){
      if (this._push) {
        return this._push(root.querySelector(this.selector), data[this.accessor]);
      } else {
        return root.querySelector(this.selector).innerHTML = data[this.accessor];
      }
    };
    prototype.pull = function(root){
      if (this._pull) {
        return [this.accessor, this._pull(root.querySelector(this.selector))];
      } else {
        return [this.accessor, root.querySelector(this.selector).innerHTML];
      }
    };
    return Rule;
  }());
  ListRule = (function(){
    ListRule.displayName = 'ListRule';
    var prototype = ListRule.prototype, constructor = ListRule;
    function ListRule(selector, accessor, opts){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.selector = selector;
      this$.accessor = accessor;
      opts == null && (opts = null);
      this$.pull = bind$(this$, 'pull', prototype);
      this$.push = bind$(this$, 'push', prototype);
      this$._push = (opts != null ? opts.push : void 8) || this$.defaultPush;
      this$._pull = (opts != null ? opts.extract : void 8) || this$.defaultPull;
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.defaultPush = function(node, item){
      node.innerHTML = item;
      return node;
    };
    prototype.defaultPull = function(node){
      return node.innerHTML;
    };
    prototype.push = function(root, data){
      var base, template, i$, ref$, len$, item, node, results$ = [];
      base = root.querySelector(this.selector);
      template = getFirstChild(base).outerHTML;
      base.innerHTML = '';
      for (i$ = 0, len$ = (ref$ = data[this.accessor]).length; i$ < len$; ++i$) {
        item = ref$[i$];
        node = string2html(root, template)[0];
        this._push(node, item);
        results$.push(base.appendChild(node));
      }
      return results$;
    };
    prototype.pull = function(root){
      var results, i$, ref$, len$, node;
      results = [];
      for (i$ = 0, len$ = (ref$ = root.querySelector(this.selector).childNodes).length; i$ < len$; ++i$) {
        node = ref$[i$];
        if (node.nodeType === 1) {
          results.push(this._pull(node));
        }
      }
      return [this.accessor, results];
    };
    return ListRule;
  }());
  Section = (function(){
    Section.displayName = 'Section';
    var prototype = Section.prototype, constructor = Section;
    function Section(){
      this.listRule = bind$(this, 'listRule', prototype);
      this.subsection = bind$(this, 'subsection', prototype);
      this.pull = bind$(this, 'pull', prototype);
      this.push = bind$(this, 'push', prototype);
      this.rule = bind$(this, 'rule', prototype);
      this.rules = [];
    }
    prototype.rule = function(sel, acc, opts){
      return this.rules.push(new Rule(sel, acc, opts));
    };
    prototype.push = function(root, data){
      return this.rules.map(function(it){
        return it.push(root, data);
      });
    };
    prototype.pull = function(root){
      return pairsToObj(this.rules.map(function(it){
        return it.pull(root);
      }));
    };
    prototype.subsection = function(sel, sec){
      return this.rules.push(sel);
    };
    prototype.listRule = function(sel, acc, opts){
      return this.rules.push(new ListRule(sel, acc, opts));
    };
    return Section;
  }());
  out$.Section = Section;
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);
